AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  DomainName:
    Type: String
    Default: AWS::NoValue
    Description: |
      The base domain name for the stack's application. There should already be
      a matching Route53 Hosted Zone in this account matching this domain.

  LogRetention:
    Type: Number
    Default: '3'
    Description: Duration in days to retain logs

  HostedZoneId:
    Type: String

  SetupDomains:
    Type: String
    Default: 'yes'
    Description: |
      Provides an escape hatch to skip domain setup. Domain resources are slow
      to set up (and even slower to destroy), so they make PR builds very slow,
      but it's still a good idea to run domain builds on the main branch before
      a production deploy.

  StageName:
    Type: String
    Description: Name of API stage.

  Subdomain:
    Default: serverless
    Type: String

  SHA:
    Type: String

  XHoneycombTeam:
    Type: String

Outputs:
  ApiUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'

  LogBucket:
    Value: !Ref LogBucket

Conditions:
  IsDev: !Equals
    - !Ref StageName
    - development

  ConfigureDomains: !Equals
    - !Ref SetupDomains
    - 'yes'

Globals:
  Function:
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
        NODE_ENV: 'production'
        NODE_OPTIONS: '--require ./telemetry --trace-warnings'
        OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yaml
        SHA: !Ref SHA
        STAGE_NAME: !Ref StageName
        X_HONEYCOMB_TEAM: !Ref XHoneycombTeam
    Handler: index.handler
    Layers:
      - !Ref DependenciesLayer
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:16'
      - !Sub 'arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-amd64-ver-1-0-1:2'
    # OpenTelemetry boosts our memory requirements. The trivial ping endpoint
    # hits 126MB as soon as we add the layer.
    MemorySize: 256
    Runtime: nodejs16.x
    Tracing: Active
    Timeout: 30

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      # Note: need to use DefinitionBody with Fn::Transform rather than
      # DefinitionUri so that we can use CloudFormation variables in api.yml
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: api.yml
      StageName: !Ref StageName
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - HttpMethod: '*'
          # These logs are super noisy and not very useful _most_ of the time.
          # We keep them on in dev because that's where we're most likely to be
          # in a broken state that would make them useful.
          LoggingLevel: !If
            - IsDev
            - 'INFO'
            - 'OFF'
          MetricsEnabled: true
          ResourcePath: '/*'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetention

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AlarmTopic:
    Type: AWS::SNS::Topic

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs16.x
      ContentUri: ../.tmp/nodejs.zip
      Description: |
        Dependencies that don't bundle well (for example, Open Telemetry
        packages need to be unmodified singletons).
      # Need to include the stack name because layer names are global.
      LayerName: !Sub dependencies-${AWS::StackName}
      RetentionPolicy: Delete

  ##############################################################################
  # DNS
  ##############################################################################

  # In addition to the following DNS config, HostedZones need to be created
  # outside of CloudFormation. CF doesn't practically support managing resources
  # in more than one account,
  #
  # The following terraform is one way to create those zones
  #
  # ```tf
  # data "aws_route53_zone" "codelikeacarpenter" {
  #  name = "codelikeacarpenter.com"
  # }
  #
  # resource "aws_route53_zone" "beacon_production" {
  #   provider = aws.beacon_production
  #   name     = "beacon.codelikeacarpenter.com"
  # }
  #
  # resource "aws_route53_record" "beacon_production" {
  #   zone_id = data.aws_route53_zone.codelikeacarpenter.zone_id
  #   name    = "beacon.codelikeacarpenter.com"
  #   type    = "NS"
  #   # Once this all seems to be working, this should be something more like
  #   # one day instead of five minutes.
  #   ttl     = "300"
  #   records = aws_route53_zone.beacon_production.name_servers
  # }
  #
  # resource "aws_route53_zone" "beacon_ci" {
  #   provider = aws.ci
  #   name     = "test.beacon.codelikeacarpenter.com"
  # }
  #
  # resource "aws_route53_record" "beacon_ci" {
  #   zone_id = data.aws_route53_zone.codelikeacarpenter.zone_id
  #   name    = "test.beacon.codelikeacarpenter.com"
  #   type    = "NS"
  #   # This needs more investigation, but the development and test stacks may
  #   # deploy significantly faster if this ttl is made much lower.
  #   ttl     = "300"
  #   records = aws_route53_zone.beacon_ci.name_servers
  # }
  #
  # resource "aws_route53_zone" "beacon_playground" {
  #   provider = aws.playground
  #   name     = "playground.beacon.codelikeacarpenter.com"
  # }
  #
  # resource "aws_route53_record" "beacon_playground" {
  #   zone_id = data.aws_route53_zone.codelikeacarpenter.zone_id
  #   name    = "playground.beacon.codelikeacarpenter.com"
  #   type    = "NS"
  #   # This needs more investigation, but the development and test stacks may
  #   # deploy significantly faster if this ttl is made much lower.
  #   ttl     = "300"
  #   records = aws_route53_zone.beacon_playground.name_servers
  # }
  # ```
  #
  # This setup seems to address most of the issues of the previous setup.
  # 1. The zones are persistent and managed outside of CloudFormation, so
  # there's no need for the manual step of setting up NS records.
  # 2. There's still an issue if we want to mount this application at the root
  # of a domain, but that's now an issue to solve externally. For example,
  # assuming the domain is registered in the management account, but that we're
  # to serve prod out of a dedicated account, we can use pretty much the same
  # terraform config as above, but instead of
  # `data.aws_route53_zone.codelikeacarpenter`, we can use
  # `aws_route53domains_registered_domain` to delegate the root domain's zone
  # to the production account, and then use the rest of the resourse to
  # that zone instead of the mgmt account's root zone. I won't be doing that
  # here since I don't want to host codelikeacarpenter.com in the beacon prod
  # account
  # 3. Now that all the zones are persistent, we can use this setup during tests

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: ConfigureDomains
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub "api.${DomainName}"
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub "www.${DomainName}"
          HostedZoneId: !Ref HostedZoneId
      SubjectAlternativeNames:
        - !Sub "api.${DomainName}"
        - !Sub "www.${DomainName}"
      ValidationMethod: DNS

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: ConfigureDomains
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Sub 'api.${DomainName}'
      EndpointConfiguration:
        Types:
          - EDGE

  ApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: ConfigureDomains
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref Api
      Stage: !Ref Api.Stage

  ApiRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: ConfigureDomains
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub 'api.${DomainName}'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApiDomainName.DistributionHostedZoneId
            DNSName: !GetAtt ApiDomainName.DistributionDomainName
        - Name: !Sub 'api.${DomainName}'
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt ApiDomainName.DistributionHostedZoneId
            DNSName: !GetAtt ApiDomainName.DistributionDomainName

  RootDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: ConfigureDomains
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - EDGE

  RootBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: ConfigureDomains
    Properties:
      DomainName: !Ref RootDomainName
      RestApiId: !Ref Api
      Stage: !Ref Api.Stage

  RootRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: ConfigureDomains
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub '${DomainName}'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt RootDomainName.DistributionHostedZoneId
            DNSName: !GetAtt RootDomainName.DistributionDomainName
        - Name: !Sub '${DomainName}'
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt RootDomainName.DistributionHostedZoneId
            DNSName: !GetAtt RootDomainName.DistributionDomainName

  WwwDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: ConfigureDomains
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Sub 'www.${DomainName}'
      EndpointConfiguration:
        Types:
          - EDGE

  WwwBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: ConfigureDomains
    Properties:
      DomainName: !Ref WwwDomainName
      RestApiId: !Ref Api
      Stage: !Ref Api.Stage

  WwwRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: ConfigureDomains
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub 'www.${DomainName}'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt WwwDomainName.DistributionHostedZoneId
            DNSName: !GetAtt WwwDomainName.DistributionDomainName
        - Name: !Sub 'www.${DomainName}'
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt WwwDomainName.DistributionHostedZoneId
            DNSName: !GetAtt WwwDomainName.DistributionDomainName

  ##############################################################################
  # Endpoint Lambdas
  ##############################################################################

  FnPing:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../.tmp/functions/@beacon/function-ping
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}

  FnPingResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda-resources.yml
      Parameters:
        Api: !Ref Api
        FunctionName: !Ref FnPing
        FunctionBaseName: 'FnPing'
        LambdaLatencyP99Threshold: '5000'
        LambdaLatencyP95Threshold: '1000'
        LogRetention: !Ref LogRetention
        HttpMethod: GET
        HttpPath: 'api/v1/ping'
        StageName: !Ref StageName
        Topic: !Ref AlarmTopic
